#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2020 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: CC-BY-SA-4.0

# Converts an RDF file into a visual graph representation in SVG and PNG.
# For more info, see print_help() below.

set -e

# These are all supported by DOT,
# but only the uncommented ones give reasonable output for our scenario
layout_engine="dot"
#layout_engine="neato"
#layout_engine="twopi"
#layout_engine="circo"
layout_engine="fdp"
layout_engine="sfdp"
#layout_engine="patchwork"
#layout_engine="osage"

layout_engine="fdp"
ontology_viz=true
open=true
open_svg=true
filter_doc=true
#ont_viz_repo="https://github.com/usc-isi-i2/ontology-visualization.git"
ont_viz_repo="https://github.com/hoijui/ontology-visualization.git"
ont_viz_repo="${ONT_VIZ_REPO:-$HOME/src/ontology-visualization}"
sudo=$(which sudo && echo "sudo" || echo "")

function install_requirements() {
	if ! which dot > /dev/null
	then
		$sudo apt-get install -y -qq graphviz
	fi
	if [ ! -e "$ont_viz_repo" ]
	then
		mkdir -p "$(dirname "$ont_viz_repo")"
		git clone "$ont_viz_repo" "$ont_viz_repo"
		$sudo pip3 install -r "$ont_viz_repo/requirements.txt"
	fi
}

function print_help() {

	echo "Visualize an RDF file (including RDF/XML, Turtle, JSON-LD, ...) as a graph in PNG and SVG."
	echo
	echo "Usage:"
	echo "         $(basename "$0") [OPTIONS] <rdf-file> [rdf-file...]"
	echo "Options:"
	echo "          -h, --help                  Show this help message"
	echo "          -b, --basic                 Use rdf2dot, not ontology-visualization"
	echo "          -n, --do-not-open           Do not open the created file in a viewer"
	echo "          -p, --open-png              Open the generated PNG, not the SVG"
	echo "          -k, --keep-doc              Keeps doc comments (labels and descriptions) and the verbose/original naming"
	echo "          -l, --layout [engine]       Define the layout engine to use for DOT visualization (default: $layout_engine, options: {dot, fdp, sfdp})"
	echo "          -s, --install-requirements  Open the generated PNG, not the SVG"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # past argument

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		-b|--basic)
			ontology_viz=false
			;;
		-n|--do-not-open)
			open=false
			;;
		-p|--open-png)
			open_svg=false
			;;
		-k|--keep-doc)
			filter_doc=false
			;;
		-s|--install-requirements)
			install_requirements
			exit 0
			;;
		-l|--layout)
			layout_engine="$1"
			shift # past value
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

input_file1="$1"
base_file="${input_file1%.*}"
dot_file="${base_file}.dot"
svg_file="${base_file}.svg"
png_file="${base_file}.png"

if $ontology_viz
then
	python3 "$ont_viz_repo/ontology_viz.py" -C "$ont_viz_repo/config.json" -o "$dot_file" "$@" #-O "$ont_viz_repo/ontology.ttl"

	if $filter_doc
	then
		echo "Filter the DOT/Graphviz file - removing comments"
		grep -v -E '[0-9a-f]{32}' \
			< "$dot_file" \
			> "$dot_file.tmp"
		mv "$dot_file.tmp" "${dot_file}"

		echo "Filter the DOT/Graphviz file - cleaning up the visual space"
		sed \
			-e 's/rdfs:subClassOf//' \
			-e 's/rdfs://' \
			< "$dot_file" \
			>  "${dot_file}.tmp"
		mv "$dot_file.tmp" "${dot_file}"
	fi
else
	rdf2dot "$@" > "$dot_file"
fi

echo "Generated Graphviz/DOT graph representation in '$dot_file'"

dot -Glayout="$layout_engine" -Grankdir=LR -Tsvg -o "$svg_file" "$dot_file"
echo "Generated SVG graph representation in '$svg_file'"

dot -Glayout="$layout_engine" -Grankdir=LR -Tpng -o "$png_file" "$dot_file"
echo "Generated PNG graph representation in '$png_file'"

if $open
then
	if $open_svg
	then
		xdg-open "$svg_file"
	else
		xdg-open "$png_file"
	fi
fi
