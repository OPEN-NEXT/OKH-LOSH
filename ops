{"author":{"id":"aed0d72ca16b13a779b1d37a0771f1682d5a59e673ecfbcdd34155713180df84"},"ops":[{"type":6,"timestamp":1671045852,"nonce":"2D4fifVwg6GUVpSmKY70b8UyhmY=","metadata":{"github-id":"UCE_lAHOD3p2KM5ZPfCbzjjJ16w"},"target":"850b2e00ee3e38e4d10d19ab5d8a36d640dd05ea70f12512e02685ab05e33373","message":"This came up in the the Sensorica + OKH + ValueFlows hackathon today.\n\nIn order for us to (automatically) identify what kind of thing a Part/Module (in OKH terms) a thing is,\nit could make sense to define a pattern-language (or ontology?),\nwhich we could look for in file and directory names of a project.\n\nThe osh-tool could then look for these, and give extra-points if such \"tags\"/patterns are used.\n\nglocalvr: OSE US pattern language: \\\nhttps://wiki.opensourceecology.org/wiki/Pattern_Language\n\nBob: ValueFlows started with a pattern that we talked about developing into a pattern language, but never did the whole language: \\\nhttp://mikorizal.org/dependent_demand.pdf\n\nNote: This idea might overlap with [TsDC](https://gitlab.com/OSEGermany/oh-tsdc). It defines what kind of hardware has to define what kind of meta-data, for example, a chair might have to define the maximum load it can bear, while a camera objective might need to define its focal length, but not vice-versa. TsDC is not yet well developed though. That might happen in 2023 (at least there are plans for that).\n\nDecision- \u0026 Classification-Trees - Clearly Explained:\nhttps://www.youtube.com/watch?v=_L39rN6gz7Y","files":null},{"type":6,"timestamp":1671045943,"nonce":"RwwrSBp/0qDRkGB7eCNZI8lCLCY=","metadata":{"github-id":"UCE_lAHOD3p2KM5ZPfCbzjjJ3ZM"},"target":"850b2e00ee3e38e4d10d19ab5d8a36d640dd05ea70f12512e02685ab05e33373","message":"This came up in the the Sensorica + OKH + ValueFlows hackathon today.\n\nIn order for us to (automatically) identify what kind of thing a Part/Module (in OKH terms) a thing is,\nit could make sense to define a pattern-language (or ontology?),\nwhich we could look for in file and directory names of a project.\n\nThe [osh-tool](https://gitlab.com/OSEGermany/osh-tool/-/issues/28) could then look for these,\nand give extra-points if such \"tags\"/patterns are used.\n\nglocalvr: OSE US pattern language: \\\nhttps://wiki.opensourceecology.org/wiki/Pattern_Language\n\nBob: ValueFlows started with a pattern that we talked about developing into a pattern language, but never did the whole language: \\\nhttp://mikorizal.org/dependent_demand.pdf\n\nNote: This idea might overlap with [TsDC](https://gitlab.com/OSEGermany/oh-tsdc). It defines what kind of hardware has to define what kind of meta-data, for example, a chair might have to define the maximum load it can bear, while a camera objective might need to define its focal length, but not vice-versa. TsDC is not yet well developed though. That might happen in 2023 (at least there are plans for that).\n\nDecision- \u0026 Classification-Trees - Clearly Explained:\nhttps://www.youtube.com/watch?v=_L39rN6gz7Y","files":null},{"type":6,"timestamp":1671046924,"nonce":"PTpCxc7lZABxUOsfqRCUWBS6IVI=","metadata":{"github-id":"UCE_lAHOD3p2KM5ZPfCbzjjKFm8"},"target":"850b2e00ee3e38e4d10d19ab5d8a36d640dd05ea70f12512e02685ab05e33373","message":"This came up in the the Sensorica + OKH + ValueFlows hackathon today.\n\nIn order for us to (automatically) identify what kind of thing a Part/Module (in OKH terms) a thing is,\nit could make sense to define a pattern-language (or ontology?),\nwhich we could look for in file and directory names of a project.\n\nThe [osh-tool](https://gitlab.com/OSEGermany/osh-tool/-/issues/28) could then look for these,\nand give extra-points if such \"tags\"/patterns are used.\n\nglocalvr: OSE US pattern language: \\\nhttps://wiki.opensourceecology.org/wiki/Pattern_Language\n\nBob: ValueFlows started with a pattern that we talked about developing into a pattern language, but never did the whole language: \\\nhttp://mikorizal.org/dependent_demand.pdf\n\nkny5: We could use taxonomies from parametric design CAD tools, like:\nhttp://papers.cumincad.org/data/works/att/caadria2015_178.content.pdf\n(and also extract them from CAD files?)\n\nNote: This idea might overlap with [TsDC](https://gitlab.com/OSEGermany/oh-tsdc). It defines what kind of hardware has to define what kind of meta-data, for example, a chair might have to define the maximum load it can bear, while a camera objective might need to define its focal length, but not vice-versa. TsDC is not yet well developed though. That might happen in 2023 (at least there are plans for that).\n\nDecision- \u0026 Classification-Trees - Clearly Explained:\nhttps://www.youtube.com/watch?v=_L39rN6gz7Y","files":null},{"type":6,"timestamp":1671046992,"nonce":"Ins93kBrevfaNYCACsUcRumtRbM=","metadata":{"github-id":"UCE_lAHOD3p2KM5ZPfCbzjjKGfA"},"target":"850b2e00ee3e38e4d10d19ab5d8a36d640dd05ea70f12512e02685ab05e33373","message":"This came up in the the Sensorica + OKH + ValueFlows hackathon today.\n\nIn order for us to (automatically) identify what kind of thing a Part/Module (in OKH terms) a thing is,\nit could make sense to define a pattern-language (or ontology?),\nwhich we could look for in file and directory names of a project.\n\nThe [osh-tool](https://gitlab.com/OSEGermany/osh-tool/-/issues/28) could then look for these,\nand give extra-points if such \"tags\"/patterns are used.\n\nglocalvr: OSE US pattern language: \\\nhttps://wiki.opensourceecology.org/wiki/Pattern_Language\n\nBob: ValueFlows started with a pattern that we talked about developing into a pattern language, but never did the whole language: \\\nhttp://mikorizal.org/dependent_demand.pdf\n\nkny5: We could use taxonomies from parametric design CAD tools, like:\nhttp://papers.cumincad.org/data/works/att/caadria2015_178.content.pdf\n(and also extract them from CAD files?)\n\u003e I know for Python there are bit walkers to get this info from propietary binaries, we could process this files and get the metadata and store in a \"modeling tags\" file. idk.\n\nNote: This idea might overlap with [TsDC](https://gitlab.com/OSEGermany/oh-tsdc). It defines what kind of hardware has to define what kind of meta-data, for example, a chair might have to define the maximum load it can bear, while a camera objective might need to define its focal length, but not vice-versa. TsDC is not yet well developed though. That might happen in 2023 (at least there are plans for that).\n\nDecision- \u0026 Classification-Trees - Clearly Explained:\nhttps://www.youtube.com/watch?v=_L39rN6gz7Y","files":null},{"type":6,"timestamp":1671051556,"nonce":"8DludhDIZmYuEl9KBMFYYZY3YV0=","metadata":{"github-id":"UCE_lAHOD3p2KM5ZPfCbzjjLHss"},"target":"850b2e00ee3e38e4d10d19ab5d8a36d640dd05ea70f12512e02685ab05e33373","message":"This came up in the the Sensorica + OKH + ValueFlows hackathon today.\n\nIn order for us to (automatically) identify what kind of thing a Part/Module (in OKH terms) a thing is,\nit could make sense to define a pattern-language (or ontology?),\nwhich we could look for in file and directory names of a project.\n\nThe [osh-tool](https://gitlab.com/OSEGermany/osh-tool/-/issues/28) could then look for these,\nand give extra-points if such \"tags\"/patterns are used.\n\nglocalvr: OSE US pattern language: \\\nhttps://wiki.opensourceecology.org/wiki/Pattern_Language\n\nBob: ValueFlows started with a pattern that we talked about developing into a pattern language, but never did the whole language: \\\nhttp://mikorizal.org/dependent_demand.pdf\n\nkny5: We could use taxonomies from parametric design CAD tools\\*, like:\nhttp://papers.cumincad.org/data/works/att/caadria2015_178.content.pdf\n(and also extract them from CAD files?)\n\u003e I know for Python there are bit walkers to get this info from proprietary binaries, **we could process this files and get the metadata and store in a \"modeling tags\" file. idk.**\n* https://www.sciencedirect.com/science/article/abs/pii/S0010448505000412\n* https://www.sciencedirect.com/science/article/abs/pii/S001044850400140X\n\n\\* CAM == CAD tool limited to processes available in manufacturing\n\nNote: This idea might overlap with [TsDC](https://gitlab.com/OSEGermany/oh-tsdc). It defines what kind of hardware has to define what kind of meta-data, for example, a chair might have to define the maximum load it can bear, while a camera objective might need to define its focal length, but not vice-versa. TsDC is not yet well developed though. That might happen in 2023 (at least there are plans for that).\n\nDecision- \u0026 Classification-Trees - Clearly Explained:\nhttps://www.youtube.com/watch?v=_L39rN6gz7Y","files":null}]}