{"author":{"id":"aed0d72ca16b13a779b1d37a0771f1682d5a59e673ecfbcdd34155713180df84"},"ops":[{"type":6,"timestamp":1691219689,"nonce":"mreQ01ZC85lxoVp3EtAzT/uVl04=","metadata":{"github-id":"UCE_lAHOD3p2KM5ca9Qyzkdf61M"},"target":"9535f783c6150495ae5231b32d0ed72e7d40b5cc9ba0def575c7791eb2509c95","message":"As it is now, in RDF, a Module can have \"sub-modules\" by means of the `okh:usesModule` property:\n\n```\nokh:usesModule\n  a owl:ObjectProperty ;\n  rdfs:label \"uses Module\" ;\n  rdfs:comment \"refers to a *release*/snapshot of an (external) OSH Module used in this design (should also appear in the BoM)\" ;\n  schema:rangeIncludes\n    okh:Module,\n    okh:WebsiteUrl ;\n  schema:domainIncludes okh:Module ;\n```\n\nThere is no way this could come into existence through the krawler though, as it is at the moment, because it always first generates a TOML manifest (maybe just by downloading it), and then creates RDF form that. our TOML specification does not allow for sub0-modules though, as of now.\n\nin the course of investigating this, I read up on some of our docu, and read the specification(s), and found that (at least to me), it is quite unclear what a module and what a part is, and  I found no explanation why we have this distinction, nor a list of the differences, nor a guide when to use which.\n\nAs it is now, to my best knowledge after reading through this repo a bit:\n\n* A Module is usually in its own repo, but could be in a sub-folder in its own repo too\n* A Part below a repo, and specified in the manifest of its parent-module\n* A Module can have sub-parts\n* A Module can have/use other(/sub-) Modules -\n  but so far only in RDF, not in:\n  * the TOML-manifest\n  * the Web-UI for creating a TOML-manifest\n* A Part can not be in its own repo and have its own manifest file\n* A Part can not have sub-Parts\n* A Part can not have sub-Modules\n* Parts can not have a BOM (currently)\n* A Module is a thing that could likely be useful for other assemblies/modules, independent of any parent-modules\n* Parts - and here it gets very cloudy to me, or say, this is my own interpretation - can be physically separate from the module, but would not make sense to be used in an other module?\n* Parts can currently not have a BOM\n\nHonestly, I am totally confused and don't know what to tell people are asking about this stuff.","files":null},{"type":6,"timestamp":1691220205,"nonce":"p2XVxzNLlAiCvtNHGF4UDVzsKo0=","metadata":{"github-id":"UCE_lAHOD3p2KM5ca9Qyzkdf838"},"target":"9535f783c6150495ae5231b32d0ed72e7d40b5cc9ba0def575c7791eb2509c95","message":"As it is now, in RDF, a Module can have \"sub-modules\" by means of the `okh:usesModule` property:\n\n```\nokh:usesModule\n  a owl:ObjectProperty ;\n  rdfs:label \"uses Module\" ;\n  rdfs:comment \"refers to a *release*/snapshot of an (external) OSH Module used in this design (should also appear in the BoM)\" ;\n  schema:rangeIncludes\n    okh:Module,\n    okh:WebsiteUrl ;\n  schema:domainIncludes okh:Module ;\n```\n\nThere is no way this could come into existence through the krawler though, as it is at the moment, because it always first generates a TOML manifest (maybe just by downloading it), and then creates RDF from that. Our TOML specification does not allow for sub-modules though, as of now - only for Parts as sub things of a module.\n\nIn the course of investigating this, I read up on some of our docu, read the specification(s), and found that (at least to me), it is quite unclear what a module and what a part is. I also found no explanation why we have this distinction, nor a list of the differences, nor a guide when to use which.\n\nThis is how it is now (up until August 2023 and at least 945af83), to my best knowledge, and after reading through this repo a bit:\n\n* A Module is usually in its own repo, but could be in a sub-folder in its own repo too\n* A Part is in a sub(..)-directory of .a repo, and specified in the manifest of its parent-module\n* A Module can have sub-parts\n* A Module can have/use other(/sub-) Modules -\n  but so far only in RDF, not in:\n  * the TOML-manifest\n  * the Web-UI for creating a TOML-manifest\n* A Part can not be in its own repo and have its own manifest file\n* A Part can not have sub-Parts\n* A Part can not have sub-Modules\n* Parts can not have a BoM (#136)\n* A Module is a thing that could likely be useful for other assemblies/modules, independent of any parent-modules\n* Parts - and here it gets very cloudy to me, or say, this is my own interpretation -\n  can be physically separate from the module, but would not make sense to be used in an other module?\n\nHonestly, I am totally confused, and don't know what to tell people who are asking about this stuff.","files":null},{"type":6,"timestamp":1691220491,"nonce":"H/CEBKeXPCPAvSHQAzFeZ0svcAc=","metadata":{"github-id":"UCE_lALOD3p2KM5TVx-lzjVQ_Lk"},"target":"61d7f08fa2b1c6cddf4eac1742bc75be9bbd62014a310a69d4a2809cba7d1493","message":"jupp, totally agree! in fact, we had it, but it apparently got lost over time\n\nsuggestion:\n\n- a module is an assembly with a dedicated function (hence it must be defined)\n- a module can consist of parts and other modules; parts are in the same repo, other modules in other repos\n- sub-modules can be referenced in two ways:\n  - URL to LOSH object (e.g. `https://www.thingiverse.com/thing28455/1.0.0#Project`. Then it doesn't matter on which platform the module is hosted (e.g. Wikifactory projects don't have a manifest file))\n  - version-specific/snapshot URL to the repo, if the module is not yet part of LOSH\n    - this could be a good hint for the crawler to check out those modules too\n  - I believe both ways could be merged, since LOSH uses repo URLs to reference modules. however, I think in practice it could get messy when users don't use the right links (or we add a community-based method to fix that afterwards)\n\nin a TOML file it could look like this\n\n```\n[…]\n\n[[module]]\nreference: https://gitlab.com/OSEGermany/ohloom/-/tree/ohloom-0.10.0\n```\n\ncomment:\n\n\u003e Parts can not have a BoM (currently)\n\n↑ since \"A Part can not have sub-Parts\" there's also no BoM (just a comment on the \"(currently)\"","files":null},{"type":6,"timestamp":1691220534,"nonce":"BdDmEVPoJTYbptD9FdkDwpow1iU=","metadata":{"github-id":"UCE_lALOD3p2KM5TVx-lzjVQ_Rk"},"target":"61d7f08fa2b1c6cddf4eac1742bc75be9bbd62014a310a69d4a2809cba7d1493","message":"jupp, totally agree! in fact, we had it, but it apparently got lost over time\n\nsuggestion:\n\n- a module is an assembly with a dedicated function (hence it must be defined)\n- a module can consist of parts and other modules; parts are in the same repo, other modules in other repos\n- sub-modules can be referenced in two ways:\n  - IRI to LOSH RDF object (e.g. `https://www.thingiverse.com/thing28455/1.0.0#Project`. Then it doesn't matter on which platform the module is hosted (e.g. Wikifactory projects don't have a manifest file))\n  - version-specific/snapshot URL to the repo, if the module is not yet part of LOSH\n    - this could be a good hint for the crawler to check out those modules too\n  - I believe both ways could be merged, since LOSH uses repo URLs to reference modules. however, I think in practice it could get messy when users don't use the right links (or we add a community-based method to fix that afterwards)\n\nin a TOML file it could look like this\n\n```\n[…]\n\n[[module]]\nreference: https://gitlab.com/OSEGermany/ohloom/-/tree/ohloom-0.10.0\n```\n\ncomment:\n\n\u003e Parts can not have a BoM (currently)\n\n↑ since \"A Part can not have sub-Parts\" there's also no BoM (just a comment on the \"(currently)\"","files":null},{"type":6,"timestamp":1691220680,"nonce":"kraA/1ixIKMwUQ99zVUV9GUyNDE=","metadata":{"github-id":"UCE_lALOD3p2KM5TV1XIzjVQ_qE"},"target":"45a267f6bb5aaa2a711eb8c8dbae642804fc0c9b7933c096214240f7fae40f6e","message":"Wow... thanks a lot @moedn, that helps a lot! :-)\n\n## IRI to LOSH RDF object\n\n\"sub-modules can be referenced in two ways:\n  1. IRI to LOSH RDF object\"\n\nI think this makes sense in general, but not yet, because the tech we are hosting is still WikiBase based. as Soon as we have it changed to RDF and under a stable domain/URL, it will totally make sense!\n\n## Parts BoM\n\nAhh.... so a part is really just a single part? e.g. it can be the lid of a case, made up of a single piece of plastic that is 3D-Printed, but it could not be a lid of a case that is made up of two metal-parts that are screwed together?\nso the parts are basically the items in the assembly guide then?\n\n## Rest\n\n.. perfect! :-)\nwill try to get the `[[module]]` part into the TOML spec then!\n\nAnd once we are finished in this issue (the above two things are clear to me), I will adjust the docu and tech-spec. around Parts and Modules.","files":null},{"type":6,"timestamp":1691220791,"nonce":"biQnwwlpCKuivBmM4PGGYWgubUE=","metadata":{"github-id":"UCE_lALOD3p2KM5TV4J8zjVQ_7Q"},"target":"525de3970ebde93958339ab1af0478ba20058257776f2fcea0116fd2f796a375","message":"\u003e IRI to LOSH RDF object\n\nyea, I gave it another round in my brain and I guess, just referencing the version-specific repo would be the best option. as outlined, this also allows the reconnection inside the LOSH database.\n\n\u003e Parts BoM\n\njepp, Parts are standalone parts. In the TOML file, you'd not reference _all_ items of the BoM, but only the self-designed one that users will find in the repo. all the others need to be acquired anyways, and don't allow for modification etc..\n\n\u003e Rest\n\ncomment on `[[module]]`: of course we could also just add a property and list all associated sub-modules there, but I like the similarity with `[[part]]`, so it's essentially the same process as adding a part, just with different properties\n\n---\n\ncool, thousand thanks man! :fire:","files":null},{"type":6,"timestamp":1691220878,"nonce":"HQWpIunyvXbGyRk/l8YLKaScN1k=","metadata":{"github-id":"UCE_lALOD3p2KM5TX2xEzjVRAHU"},"target":"2400d66547247f70b28ec62e21e452fb33eaf6b6d93560f1d0882fbe84307318","message":"one more thing regarding this topic: in RDF, we have these two properties:\n\n```\nokh:hasComponent\n  a owl:ObjectProperty ;\n  rdfs:label \"has Component\" ;\n  rdfs:comment \"links to parts of the module\" ;\n  schema:rangeIncludes okh:Part ;\n  schema:domainIncludes okh:Module ;\n  .\n\nokh:usesModule\n  a owl:ObjectProperty ;\n  rdfs:label \"uses Module\" ;\n  rdfs:comment \"refers to a *release*/snapshot of an (external) OSH Module used in this design (should also appear in the BoM)\" ;\n  schema:rangeIncludes\n    okh:Module,\n    okh:WebsiteUrl ;\n  schema:domainIncludes okh:Module ;\n```\n\n`okh:Component` is the super-class of both `okh:Module` and `okh:Part`, but `okh:hasComponent` only works for `okh:Part`s, not for `okh:Module`. So I would say we either make `okh:hasComponent` work for Modules too, and remove `okh:usesModule`, or we rename `okh:hasComponent`.\n\nAn other question I have is, why is it **has**Compnent, but **uses**Module?","files":null},{"type":6,"timestamp":1691222317,"nonce":"OV/BcPGcCW81L+wzBLeksgYsXpg=","metadata":{"github-id":"UCE_lALOD3p2KM5Ugww4zjVRCxU"},"target":"54ac66f025ebf9e665b25a3721cd36b5ad6bb688b98799e789d710fa914616c3","message":"Hello!  I work with @hoijui on the FabCity INTERFACER project, and work on the [Valueflows](https://valueflo.ws) ontology. @hoijui asked me to comment here, one question being the English names.  I'm a native English speaker, and have lots of data modeling experience, but I am not a maker.  And ValueFlows is expressed in RDF, so I have studied it a lot, but I have never actually developed with RDF, and feel I have some practical gaps.  So we will see, and I won't be insulted in the least if you disregard my thoughts. :)\n\nNames:\n\n* **Component** - To me this implies not being a final \"product\" that can be used on its own.  It is more like a \"part\".\n  (Note the name \"product\" I don't like either, it implies something that will be sold more than something that will be used.  I can help look for a better one if you want one.)\n\n  _Dictionary definition_:\n  \u003e A part of a mechanical or electrical system.\n\n* **Module** - I am more familiar with this in software, where it is also more like a part, and implies it can be used as part of different software applications.\n\n  _Dictionary definition_: \n  \u003e A separable component, frequently one that is interchangeable with others, for assembly into units of differing size, complexity, or function.\n\n* **Part** - Yes, a part.\n\n  _Dictionary definition_:\n  \u003e A portion or division of a whole that is separate or distinct; piece, fragment, fraction, or section.\n\nOne bigger thought on naming:  OKH-LOSH doesn't actually represent any of the above, if you are coming in from the bigger picture.  It represents designs for those things, not the already built things themselves.  Or for the things you always just buy, like screws, it represents the exactly defined \"type\", not the actual thing.  To me, it is important to situate your ontology in the rest of the world, and not make assumptions that people already know it is all about designs.\n\nAnother thought, about separating your Modules and Parts:  It makes sense that makers now always use \"commodity\" parts like screws that can be ordered from AliBaba, or bought from the hardware store down the street who got them from AliBaba.  But in the future, if we look towards more and more localization of production, those distinctions might disappear more and more.  Maybe some day there is a small factory in your town that makes screws, and has its own BoM for inputs to those, and is part of your maker network instead of outside it.  Maybe some day it goes all the way back to mining the ore.  Or not, I don't know how you think about it.\n\nQuestions that affect naming:\n1.  I guess this is always about hardware?  Do you ever include things like textiles?  (I noticed in FabCity and in our own (sadly dead) local maker space, textile makers are part of it.)\n2. On the Software (subclass of Component) that is used in the hardware, is it also the design?  Or is the software actually already programmed and tested when you represent it in OKH-LOSH?","files":null},{"type":6,"timestamp":1691253079,"nonce":"M9Pcrlzx2TmFuBWBmliaJ9FQk40=","metadata":{"github-id":"UCE_lALOD3p2KM5Ve3G6zjVSIjs"},"target":"bf8530dbb0dee2a34f76a2db3e609f5159e45b2c288df67b3f343e37d7fbadef","message":"I am brainstorming about this since a few days, and also asked Michele Langhammer and Mark Neugebauer from the FCHH network, whether they may know an ontology dealing with such stuff from industry (or elsewhere).\n\nIf not, I will start writing down some ideas and questions, and maybe work on a diagram.\n\nMy current mental model, consists of two parallel levels/spheres: virtual and physical. I think of it a bit like the main \"levels\"(?) in ValueFlows, there: Knowledge, Plan and Observation (so 3 levels in VF, 2 in our case):\n![](https://www.valueflo.ws/assets/process-layer.png)\n\nThese spheres are different, but for the most part - or at least roughly - an object in one sphere has an equivalent object in the other sphere.\n\n* e.g. a screw (\"available component\") in the physical sphere has a specification in the virtual sphere\n* a machine in the physical sphere has a design in the virtual sphere\n* an (indivisible) part or sub-assembly of the machine, has a (reusable-)design in the virtual sphere\n\nSome questions (mostly for myself and maybe discussions; numbered just to make them referenceable):\n\n1. Standard vs. Specification? (probably the later should be used primarily, and the former only for official/somehow approved specs)\n2. are physical\u0026virtual good words (for the two levels)? or maybe rather touchable\u0026untouchable? or touchable\u0026conceptual? or ...\n3. should we call these two \"levels\" or \"spheres\" or something else?\n4. is hardware something that is actually \"hard\", only? (or should we rather call it just _\u003cs\u003ehard\u003c/s\u003eware_?)\n5. ... or rather \"something you could potentially buy in a hardware store\"?\n6. could touchable be a good word to include hard things + textiles plus liquids?\n7. ... what about gas ... is it touchable? (I would say yes)\n8. do terms like _experiential_ or _tangible_ make sense for our ontology?\n    (that might include hard, soft and liquid things, but not most gases)\n9. Is that too philosophical already?\n10. some (one-piece) parts that are machined in a single go, thus being one part in the manufacturing process, may be broken off/split into multiple parts for the assembly process. Is this an indivisible part? how do we practically handle this ... do we need an other level/sphere, separating the physical one into manufacturing and assembly?\n11. ... would we need even more spheres, e.g. for recycling?\n12. How do we clearly and intuitively differentiate between a modular design (e.g. one part of a machine can be used as-is for an other machine as well) from a modular machine/touchable (e.g. the OSE US tractor, which - after being fully built, has a modular motor compartment, where one can place an electric motor or a gasoline-fulled one)?\n13. Should we setup the ontology in a way, where each individual is of class \"Something\"/Object (completely generic), and then specified through its properties: touchable, designed, specified, liquid, hard, likely-reusable, machined, standardized, a thing, whole, a piece, a part/component of something bigger, ...?\n14. Could we reuse ontologies from physics/chemistry? (researched a bit in early 2023, did not find anything useful)\n15. How do we deal with natural/grown parts (e.g. a branch from a tree)? -\u003e high variances, not specified, not fungible, no technical drawings or other exact specifications, ...\n16. Where do \"wet\" components fit in? (e.g. biological networks of neurons, mycelia)\n17. How do we include/specify/deal with the requirements of parts? (e.g. the conditions required to keep biological networks of neurons alive and/or functional)\n18. In english, there is a fixed expression: \"Is this really a thing?\" -\u003e can/should we make sure this makes sense within our ontology, as it is commonly understood? .. or better not?\n19 **How can/should we limit the scope of our ontology?**","files":null}]}