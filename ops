{"author":{"id":"aed0d72ca16b13a779b1d37a0771f1682d5a59e673ecfbcdd34155713180df84"},"ops":[{"type":3,"timestamp":1591618851,"nonce":"6o0Y0/GawCF58+DwmVdUhsVi04o=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MDU2ODc1MA==","github-url":"https://github.com/OPEN-NEXT/OKH-LOSH/issues/4#issuecomment-640568750"},"message":"\u003e     * stating the working title in the file name is\n\u003e       \n\u003e       * redundant\n\u003e       * inconvenient for long working titles\n\u003e       * **→ I would cross out this requirement and keep the file name as short \u0026 intuitive as possible** …e.g. META-MOD for OSH modules or META-COM for components\n\nVery much agree!\nI never put the working tittle there. ;-)\n(all the ones I created are just _okh.yml_)\nThis also helps in crawling and other automated processes.\n\nI would keep the file-extension though.\n\n\n\u003e     * using YAML as file format triggered a huge discussion in the group, which was never resolved (find a summary [here](https://app.standardsrepo.com/MakerNetAlliance/OpenKnowHow/issues/269))\n\u003e       \n\u003e       * @hoijui any suggestions? Creating standard metadata shouldn't require any extra tool or knowledge and the content should be easily convertible into RDF/TTL by e.g. a crawler; people mentioned JSON and TOML\n\nFrom a purely technical point of view, it should be TTL only.\nIt is by far the cleanest and most powerful, and in my eyes also the most comfortable to use, as it provides a built-into-the-format way to link to the documentation, plus auto-verification, plus built-in versioning.\n\nApart from that, there are different alternatives:\n\n* supporting multiple formats at the same time (e.g. TTL, TOML, YAML \u0026 JSON)\n* supporting only one primary format\n* supporting only one primary format, but providing auto-converters back and forth into the others\n* we could focus on having one or more tools to generate the files (GUIs, TUIs, CLIs), and then we could simply use the technically best format\n* ... probably more?\n\nIt is a hard decision. From my experience, people will never end up choosing TTL, out of fear of non-acceptance. I think that is bad, but ... does it make sense for me to try to push it against the majorities will? no.\nIt is partly a philosophical question, but it *can* be decided upon rationally, by looking at evidence in history (roughly: cases of competing technologies, what happened, which ones were chosen, ...)\nas said, usually the technically inferior ones gt chosen, and somehow.. the world continues spinning. what if, for once, we try something else? ;-)","files":null}]}