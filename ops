{"author":{"id":"aed0d72ca16b13a779b1d37a0771f1682d5a59e673ecfbcdd34155713180df84"},"ops":[{"type":3,"timestamp":1676645322,"nonce":"Sp1/aXSWFZx6OoVW5Sesft7T5dg=","metadata":{"github-id":"IC_kwDOD3p2KM5VhI79","github-url":"https://github.com/OPEN-NEXT/OKH-LOSH/issues/137#issuecomment-1434750717"},"message":"ehhh wow, thank you @moedn!! :-)\n\n10.\n    1. why we need the concept of an indivisible part (= átomos (Gr.)): I also don;t know, but to my understanding, this is what we currently have in OKH(-LOSH) as the meaning for \"Part\"\n    2. so shopping list is before manufacturing, and BoM is between manufacturing and assembly?\n12. I am trying to express different concepts:\n    1. **design leading to a modular machine**: the design will lead to a modular machine.\n    2. **design made using modules**: the design uses modules that are also used in other designs. the end-user of the machine might not think of the machine as modular, because he might not be able to exchange any modules.\n    3. **modular machine**: The end user can exchange modules (e.g. OSE US tractor motor modules)\n13. Because the more we rely on base concepts, the more different ontologies become compatible with each other, leading to more inter-linkage \u0026 compatibility\n15. :-)\n16. I don't know... can we call them hardware? where would the go in the osh-dir-std?\n17. One goal we want to achieve some-when, is: if we have the design of a piece of hardware (or tangible) and it's meta-data, to figure out where we can build it. We might order the wet parts, and the machine they will end up in can guarantee the correct environment for them, but until the machine is build, the lab might need to supply it.\n    ... ok I admit, this is a kind of edge-case, and might be easily avoided by just building the machine before ordering the wet parts or something like that.\n19. ahh... ok... problem description ... I just got tired now, but I would say: create an ontology that allows hardware designers, builders, and people who build software, standards and ontologies related to OSH, to reffer to a common vocabulary, to be more or less sure they mean the same things, and to commonly discuss about these concept, and develop them in the community, when used.","files":null},{"type":6,"timestamp":1676877457,"nonce":"vunX2felh/IxD25SvlezcbplkeE=","metadata":{"github-id":"UCE_lALOD3p2KM5VhI79zi2AxWk"},"target":"8373a26608af4bb4f6902e715d38656e878b58a470c62a0ada9327694ce1637c","message":"ehhh wow, thank you @moedn!! :-)\n\n10.\n    1. why we need the concept of an indivisible part (= átomos (Gr.)): I also don;t know, but to my understanding, this is what we currently have in OKH(-LOSH) as the meaning for \"Part\"\n    2. so shopping list is before manufacturing, and BoM is between manufacturing and assembly?\n12. I am trying to express different concepts:\n    1. **design leading to a modular machine**: the design will lead to a modular machine.\n    2. **design made using modules**: the design uses modules that are also used in other designs. the end-user of the machine might not think of the machine as modular, because he might not be able to exchange any modules.\n    3. **modular machine**: The end user can exchange modules (e.g. OSE US tractor motor modules)\n13. Because the more we rely on base concepts, the more different ontologies become compatible with each other, leading to more inter-linkage \u0026 compatibility\n15. :-)\n16. I don't know... can we call them hardware? where would they go in the osh-dir-std?\n17. One goal we want to achieve some-when, is: if we have the design of a piece of hardware (or tangible) and it's meta-data, to figure out where we can build it. We might order the wet parts, and the machine they will end up in can guarantee the correct environment for them, but until the machine is build, the lab might need to supply it.\n    ... ok I admit, this is a kind of edge-case, and might be easily avoided by just building the machine before ordering the wet parts or something like that.\n19. ahh... ok... problem description ... I just got tired now, but I would say: create an ontology that allows hardware designers, builders, and people who build software, standards and ontologies related to OSH, to refer to a common vocabulary, to be more or less sure they mean the same things, and to commonly discuss about these concept, and develop them in the community, when used.","files":null}]}