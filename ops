{"author":{"id":"25b8f2745aa164c43a1dcd87a47a4c2ab7211719fd19a10325068bd5bcafe12c"},"ops":[{"type":1,"timestamp":1621413651,"nonce":"DJnnbtz6H5blvGQP/7tPO9IY6rA=","metadata":{"github-id":"MDU6SXNzdWU4OTUxNjE4Nzk=","github-url":"https://github.com/OPEN-NEXT/OKH-LOSH/issues/98","origin":"github"},"title":"Example usage of the WikibaseReconcileEdit API and some questions","message":"Hello! \n\nI wanted to share an update on the API and how it can currently be used. In particular I'm curious to get answers to the questions at the very bottom of this post but also to get feedback on the current state of the API and your thoughts on improvements.\n\n### Example usage\n\nLets look at an example on how this could be done. Starting from the top of the [TOML file](https://github.com/OPEN-NEXT/LOSH/blob/master/sample_data/okh-OHLOOM.toml).\n\n```\nokhv = \"2.0\"\nname = \"OHLOOM\"\nrepo = \"https://gitlab.com/OSEGermany/ohloom\"\nversion = \"0.10.0\"\nrelease = \"https://gitlab.com/OSEGermany/ohloom/-/tags/ohloom-0.10.0\"\nlicense = \"CC-BY-SA-4.0\"\nlicensor = \"Jens Meisner\"\norganisation = \"OSE Germany e.V.\"\nreadme = \"README.md\"\nimage = \"/Documentation/User_Guide/User_Guide.jpg\"\ndocumentation-language = \"en-GB\"\ntechnology-readiness-level = \"OTLR-5\"\ndocumentation-readiness-level = \"ODLR-5\"\nfunction = \"The Open Hardware Loom is a simple, hand-operated weaving loom made of wood, screws and 3D printed plastic pieces for the most part. It is simple to make and operate.\"\ncpc-patent-class = \"D03D 35/00\"\ntsdc = \"MEC\"\nbom = \"sBoM.csv\"\nmanufacturing-instructions = \"/Documentation/Assembly_Guide/AssemblyGuide.md\"\nuser-manual = \"/Documentation/User_Guide/UserGuide.md\"\nfabric-width-dim = \"mm\"\nfabric-width = 400\nouter-dimension-dim = \"mm\"\nouter-dimension = \"cube(size = [400,350,150]\"\n```\nFirst of we need a unique identifier for the whole thing and repo looks to be the best candidate. \n\n```\nrepo = \"https://gitlab.com/OSEGermany/ohloom\"\n```\n\nThe payload could look like.\n\n```\nconst entity = {\n    \"wikibasereconcileedit-version\": \"0.0.1/minimal\",\n    \"statements\": [\n    {\n        \"property\": reconciliationPropertyId,\n        \"value\": \"https://gitlab.com/OSEGermany/ohloom\"\n    },\n    {\n        \"property\": namePropertyId,\n        \"value\": \"OHLOOM\"\n    },\n    {\n        \"property\": functionPropertyId,\n        \"value\": \"The Open Hardware Loom is a simple, hand-operated weaving loom made of wood, screws and 3D printed plastic pieces for the most part. It is simple to make and operate.\"\n    },\n    {\n        \"property\": documentationLanguagePropertyId,\n        \"value\": \"en-GB\"\n    },\n    {\n        \"property\": billOfMaterialsPropertyId,\n        \"value\": \"https://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/sBoM.csv\"\n    }\n    \n    ... more things here\n    \n    ]\n};\n\nconst reconcile = {\n    \"wikibasereconcileedit-version\": \"0.0.1\",\n    \"urlReconcile\": reconciliationPropertyId\n};\n\nconst payload = {\n    reconcile: reconcile,\n    entity: entity\n}\n```\n\nThe tricky part here is keeping track of the which properties correspond to what field in the TOML file. \nCurrently the reconciliation API does not provide any additional way of looking up these based on the label of the property but expects the crawler to know which one to use.  \nRelying on the label to do lookups brings however some risks as these are very easy and likely to change. \n\nWe want `billOfMaterialsPropertyId` to be of type `wikibase-item` for the api to try to reconcile the url in the statement against an item. \n\nThis request would currently create two items.\n\n```\nQ1:\n    reconciliationPropertyId: \"https://gitlab.com/OSEGermany/ohloom\"\n    namePropertyId: \"OHLOOM\"\n    functionPropertyId: \"The Open Hardware Loom is a sim....\"\n    documentationLanguagePropertyId: \"en-GB\"\n    billOfMaterialsPropertyId: Q2\n\n\nQ2:\n    reconciliationPropertyId \"https://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/sBoM.csv\"\n```\n\nGoing a bit further down the TOML file we reach a part which are to be part of the BOM.\n\n```\n[[part]]\nname = \"Clamp Ring\"\nimage = \"/Documentation/Assembly_Guide/Parts_Print_2.jpg\"\ntsdc = \"3DP\"\nsource = \"/3DParts/ClampRing/ClampRing.scad\"\nexport = [\n  \"/3DParts/ClampRing/ClampRing.pdf\",\n  \"/3DParts/ClampRing/ClampRing.stl\"\n]\nmaterial = \"PLA\"\nouter-dimension-dim = \"mm\"\nouter-dimension = \"cylinder(h=30, r=28)\"\n```\n\nWe expect each item to be reconciled against a URL. \nTo insert the Clamp Ring part from the above example we would need an url to make this work. \n\nIn the examples I cannot see this but maybe it could be created based on the TOML file it is a part of?\nWe have the manifest file which could be used as a base for the URL to uniquely identify each component. \n\n```\nhttps://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/okh.toml#Clamp_Ring\n```\n\nCould this be used to identify the part?\n\nIf that is the case then the payload could look like this:\n\n```\nconst entity = {\n    \"wikibasereconcileedit-version\": \"0.0.1/minimal\",\n    \"statements\": [\n    {\n        \"property\": reconciliationPropertyId,\n        \"value\": \"https://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/okh.toml#Clamp_Ring\"\n    },\n    {\n        \"property\": namePropertyId,\n        \"value\": \"Clamp Ring\"\n    },\n    {\n        \"property\": billOfMaterialsPropertyId,\n        \"value\": \"https://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/sBoM.csv\"\n    }\n    \n    ... more things here\n    \n    ]\n};\n\nconst reconcile = {\n    \"wikibasereconcileedit-version\": \"0.0.1\",\n    \"urlReconcile\": reconciliationPropertyId\n};\n\nconst payload = {\n    reconcile: reconcile,\n    entity: entity\n}\n```\n\nThis request would result in the following:\n\n```\nQ3:\n    reconciliationPropertyId: \"https://gitlab.com/OSEGermany/ohloom/-/raw/834222370f34ad2a07d0e41d09eb54378573b8c3/okh.toml#Clamp_Ring\"\n    namePropertyId: \"Clamp Ring\"\n    billOfMaterialsPropertyId: Q2\n```\n\n## Questions\n\nAs for questions. The most pressing things i could think of are.\n\n- The crawler would have to know what property to use in what case. This means keep some kind of mapping between the TOML specifications and and the corresponding wikibase property. There are ways we could do a lookup on the property label but since these are subject to change it wouldn't be that reliable. \n\n- How do the crawler plan to identify each component ([[part]] in the TOML file)? Given the examples i have found no unique identifier for it but suggest maybe using some kind of anchor for the url that specifies the BOM or the TOML file itself. \n\n- What is okh:Part supposed to be in the example TTL file? It's mentioned on ClampRing but never defined.\n\n- What is the plan for images or links to files within the repo? Are we supposed to support uploading images / files?\n\nKind regards\n/ Tobias","files":null}]}