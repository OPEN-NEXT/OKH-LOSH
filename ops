{"author":{"id":"aed0d72ca16b13a779b1d37a0771f1682d5a59e673ecfbcdd34155713180df84"},"ops":[{"type":1,"timestamp":1674208091,"nonce":"9iGuIioYCnvDsvrVvhNmkfOuFOE=","metadata":{"github-id":"I_kwDOD3p2KM5ca9Qy","github-url":"https://github.com/OPEN-NEXT/OKH-LOSH/issues/137","origin":"github"},"title":"Modularity issues","message":"As it is now, in RDF, a Moduel can hava \"sub-modules\" by means of the `okh:usesModule` property:\n\n```\nokh:usesModule\n  a owl:ObjectProperty ;\n  rdfs:label \"uses Module\" ;\n  rdfs:comment \"refers to a *release*/snapshot of an (external) OSH Module used in this design (should also appear in the BoM)\" ;\n  schema:rangeIncludes\n    okh:Module,\n    okh:WebsiteUrl ;\n  schema:domainIncludes okh:Module ;\n```\n\nThere is no way this could come into existence through the krawler though, as it is at the moment, because it alwyas first generates a TOML manifest (maybe just by downloading it), and then creates RDF form that. our TOML specification does not allow for sub0-modules though, as of now.\n\nin the course of investigating this, I read up on some of our docu, and read the specification(s), and found that (at least to me), it is quite unclear what a module and what a part is, and  I found no explanation why we have this distinction, nor a list of the differences, nor a guide when to use which.\n\nAs it is now, to my best knowledge after reading through this repo a bit:\n\n* A Module is usually in its own repo, but could be in a sub-folder in its own repo too\n* A Part below a repo, and specified in the manifest of its parent-module\n* A Module can have sub-parts\n* A Module can have/use other(/sub-) Modules -\n  but so far only in RDF, not in:\n  * the TOML-manifest\n  * the Web-UI for creating a TOML-manifest\n* A Part can not be in its own repo and have its own manifest file\n* A Part can not have sub-Parts\n* A Part can not have sub-Modules\n* Parts can not have a BOM (currently)\n* A Module is a thing that could likely be useful for other assemblies/modules, independent of any parent-modules\n* Parts - and here it gets very cloudy to me, or say, this is my own interpretation - can be physically separate from the module, but would not make sense to be used in an other module?\n* Parts can currently not have a BOM\n\nHonestly, I am totally confused and don't know what to tell people are asking about this stuff.","files":null}]}